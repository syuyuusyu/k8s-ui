// Generated by https://quicktype.io

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
function toOpenapi(json) {
    return cast(JSON.parse(json), r("Openapi"));
}

function openapiToJson(value) {
    return JSON.stringify(uncast(value, r("Openapi")), null, 2);
}

function invalidValue(typ, val) {
    throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`);
}

function jsonToJSProps(typ) {
    if (typ.jsonToJS === undefined) {
        var map = {};
        typ.props.forEach((p) => map[p.json] = { key: p.js, typ: p.typ });
        typ.jsonToJS = map;
    }
    return typ.jsonToJS;
}

function jsToJSONProps(typ) {
    if (typ.jsToJSON === undefined) {
        var map = {};
        typ.props.forEach((p) => map[p.js] = { key: p.json, typ: p.typ });
        typ.jsToJSON = map;
    }
    return typ.jsToJSON;
}

function transform(val, typ, getProps) {
    function transformPrimitive(typ, val) {
        if (typeof typ === typeof val) return val;
        return invalidValue(typ, val);
    }

    function transformUnion(typs, val) {
        // val must validate against one typ in typs
        var l = typs.length;
        for (var i = 0; i < l; i++) {
            var typ = typs[i];
            try {
                return transform(val, typ, getProps);
            } catch (_) { }
        }
        return invalidValue(typs, val);
    }

    function transformEnum(cases, val) {
        if (cases.indexOf(val) !== -1) return val;
        return invalidValue(cases, val);
    }

    function transformArray(typ, val) {
        // val must be an array with no invalid elements
        if (!Array.isArray(val)) return invalidValue("array", val);
        return val.map(el => transform(el, typ, getProps));
    }

    function transformObject(props, additional, val) {
        if (val === null || typeof val !== "object" || Array.isArray(val)) {
            return invalidValue("object", val);
        }
        var result = {};
        Object.getOwnPropertyNames(props).forEach(key => {
            const prop = props[key];
            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
            result[prop.key] = transform(v, prop.typ, getProps);
        });
        Object.getOwnPropertyNames(val).forEach(key => {
            if (!Object.prototype.hasOwnProperty.call(props, key)) {
                result[key] = transform(val[key], additional, getProps);
            }
        });
        return result;
    }

    if (typ === "any") return val;
    if (typ === null) {
        if (val === null) return val;
        return invalidValue(typ, val);
    }
    if (typ === false) return invalidValue(typ, val);
    while (typeof typ === "object" && typ.ref !== undefined) {
        typ = typeMap[typ.ref];
    }
    if (Array.isArray(typ)) return transformEnum(typ, val);
    if (typeof typ === "object") {
        return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val)
            : typ.hasOwnProperty("arrayItems") ? transformArray(typ.arrayItems, val)
                : typ.hasOwnProperty("props") ? transformObject(getProps(typ), typ.additional, val)
                    : invalidValue(typ, val);
    }
    return transformPrimitive(typ, val);
}

function cast(val, typ) {
    return transform(val, typ, jsonToJSProps);
}

function uncast(val, typ) {
    return transform(val, typ, jsToJSONProps);
}

function a(typ) {
    return { arrayItems: typ };
}

function u(...typs) {
    return { unionMembers: typs };
}

function o(props, additional) {
    return { props, additional };
}

function m(additional) {
    return { props: [], additional };
}

function r(name) {
    return { ref: name };
}

const typeMap = {
    "Openapi": o([
        { json: "swagger", js: "swagger", typ: "" },
        { json: "info", js: "info", typ: r("Info") },
        { json: "paths", js: "paths", typ: m(r("Path")) },
        { json: "definitions", js: "definitions", typ: m(r("Definition")) },
        { json: "securityDefinitions", js: "securityDefinitions", typ: r("SecurityDefinitions") },
        { json: "security", js: "security", typ: a(r("Security")) },
    ], false),
    "Definition": o([
        { json: "description", js: "description", typ: u(undefined, "") },
        { json: "type", js: "type", typ: u(undefined, r("Type")) },
        { json: "required", js: "required", typ: u(undefined, a("")) },
        { json: "properties", js: "properties", typ: u(undefined, m(r("Property"))) },
        { json: "x-kubernetes-group-version-kind", js: "x-kubernetes-group-version-kind", typ: u(undefined, a(r("XKubernetesGroupVersionKind"))) },
        { json: "format", js: "format", typ: u(undefined, "") },
    ], false),
    "Property": o([
        { json: "description", js: "description", typ: u(undefined, "") },
        { json: "type", js: "type", typ: u(undefined, r("Type")) },
        { json: "items", js: "items", typ: u(undefined, r("AdditionalProperties")) },
        { json: "$ref", js: "$ref", typ: u(undefined, "") },
        { json: "format", js: "format", typ: u(undefined, r("Format")) },
        { json: "properties", js: "properties", typ: u(undefined, r("Properties")) },
        { json: "x-kubernetes-patch-merge-key", js: "x-kubernetes-patch-merge-key", typ: u(undefined, "") },
        { json: "x-kubernetes-patch-strategy", js: "x-kubernetes-patch-strategy", typ: u(undefined, r("XKubernetesPatchStrategy")) },
        { json: "additionalProperties", js: "additionalProperties", typ: u(undefined, r("AdditionalProperties")) },
        { json: "x-kubernetes-list-map-keys", js: "x-kubernetes-list-map-keys", typ: u(undefined, a("")) },
        { json: "x-kubernetes-list-type", js: "x-kubernetes-list-type", typ: u(undefined, "") },
    ], false),
    "AdditionalProperties": o([
        { json: "type", js: "type", typ: u(undefined, r("Type")) },
        { json: "format", js: "format", typ: u(undefined, r("Format")) },
        { json: "items", js: "items", typ: u(undefined, r("Items")) },
        { json: "$ref", js: "$ref", typ: u(undefined, "") },
    ], false),
    "Items": o([
        { json: "type", js: "type", typ: r("Type") },
    ], false),
    "Properties": o([
        { json: "continue", js: "continue", typ: r("Continue") },
        { json: "remainingItemCount", js: "remainingItemCount", typ: r("RemainingItemCount") },
        { json: "resourceVersion", js: "resourceVersion", typ: r("Continue") },
        { json: "selfLink", js: "selfLink", typ: r("Continue") },
    ], false),
    "Continue": o([
        { json: "description", js: "description", typ: "" },
        { json: "type", js: "type", typ: r("Type") },
    ], false),
    "RemainingItemCount": o([
        { json: "description", js: "description", typ: "" },
        { json: "type", js: "type", typ: r("Type") },
        { json: "format", js: "format", typ: r("Format") },
    ], false),
    "XKubernetesGroupVersionKind": o([
        { json: "group", js: "group", typ: r("Group") },
        { json: "kind", js: "kind", typ: "" },
        { json: "version", js: "version", typ: r("Version") },
    ], false),
    "Info": o([
        { json: "title", js: "title", typ: "" },
        { json: "version", js: "version", typ: "" },
    ], false),
    "Path": o([
        { json: "get", js: "get", typ: u(undefined, r("Get")) },
        { json: "parameters", js: "parameters", typ: u(undefined, a(r("BearerToken"))) },
        { json: "post", js: "post", typ: u(undefined, r("Delete")) },
        { json: "delete", js: "delete", typ: u(undefined, r("Delete")) },
        { json: "put", js: "put", typ: u(undefined, r("Delete")) },
        { json: "patch", js: "patch", typ: u(undefined, r("Get")) },
        { json: "options", js: "options", typ: u(undefined, r("Head")) },
        { json: "head", js: "head", typ: u(undefined, r("Head")) },
    ], false),
    "Delete": o([
        { json: "description", js: "description", typ: "" },
        { json: "consumes", js: "consumes", typ: a(r("Consume")) },
        { json: "produces", js: "produces", typ: a(r("Consume")) },
        { json: "schemes", js: "schemes", typ: a(r("Scheme")) },
        { json: "tags", js: "tags", typ: a("") },
        { json: "operationId", js: "operationId", typ: "" },
        { json: "parameters", js: "parameters", typ: u(undefined, a(r("BearerToken"))) },
        { json: "responses", js: "responses", typ: m(r("DeleteResponse")) },
        { json: "x-kubernetes-action", js: "x-kubernetes-action", typ: r("DeleteXKubernetesAction") },
        { json: "x-kubernetes-group-version-kind", js: "x-kubernetes-group-version-kind", typ: r("XKubernetesGroupVersionKind") },
    ], false),
    "BearerToken": o([
        { json: "uniqueItems", js: "uniqueItems", typ: u(undefined, true) },
        { json: "type", js: "type", typ: u(undefined, r("Type")) },
        { json: "description", js: "description", typ: u(undefined, "") },
        { json: "name", js: "name", typ: r("Name") },
        { json: "in", js: "in", typ: r("In") },
        { json: "schema", js: "schema", typ: u(undefined, r("BearerTokenSchema")) },
        { json: "required", js: "required", typ: u(undefined, true) },
    ], false),
    "BearerTokenSchema": o([
        { json: "$ref", js: "$ref", typ: "" },
    ], false),
    "DeleteResponse": o([
        { json: "description", js: "description", typ: r("Description") },
        { json: "schema", js: "schema", typ: u(undefined, r("ResponseSchema")) },
    ], false),
    "ResponseSchema": o([
        { json: "$ref", js: "$ref", typ: u(undefined, "") },
        { json: "type", js: "type", typ: u(undefined, r("Type")) },
    ], false),
    "Get": o([
        { json: "description", js: "description", typ: u(undefined, "") },
        { json: "consumes", js: "consumes", typ: u(undefined, a(r("Consume"))) },
        { json: "produces", js: "produces", typ: u(undefined, a(r("Produce"))) },
        { json: "schemes", js: "schemes", typ: a(r("Scheme")) },
        { json: "tags", js: "tags", typ: a("") },
        { json: "operationId", js: "operationId", typ: "" },
        { json: "responses", js: "responses", typ: m(r("DeleteResponse")) },
        { json: "x-kubernetes-action", js: "x-kubernetes-action", typ: u(undefined, r("GetXKubernetesAction")) },
        { json: "x-kubernetes-group-version-kind", js: "x-kubernetes-group-version-kind", typ: u(undefined, r("XKubernetesGroupVersionKind")) },
        { json: "parameters", js: "parameters", typ: u(undefined, a(r("BearerToken"))) },
    ], false),
    "Head": o([
        { json: "description", js: "description", typ: "" },
        { json: "consumes", js: "consumes", typ: a(r("Consume")) },
        { json: "produces", js: "produces", typ: a(r("Consume")) },
        { json: "schemes", js: "schemes", typ: a(r("Scheme")) },
        { json: "tags", js: "tags", typ: a(r("Tag")) },
        { json: "operationId", js: "operationId", typ: "" },
        { json: "responses", js: "responses", typ: m(r("HeadResponse")) },
        { json: "x-kubernetes-action", js: "x-kubernetes-action", typ: r("DeleteXKubernetesAction") },
        { json: "x-kubernetes-group-version-kind", js: "x-kubernetes-group-version-kind", typ: r("XKubernetesGroupVersionKind") },
    ], false),
    "HeadResponse": o([
        { json: "description", js: "description", typ: r("Description") },
        { json: "schema", js: "schema", typ: u(undefined, r("Items")) },
    ], false),
    "Security": o([
        { json: "BearerToken", js: "BearerToken", typ: a("any") },
    ], false),
    "SecurityDefinitions": o([
        { json: "BearerToken", js: "BearerToken", typ: r("BearerToken") },
    ], false),
    "Format": [
        "byte",
        "double",
        "int32",
        "int64",
    ],
    "Type": [
        "apiKey",
        "array",
        "boolean",
        "integer",
        "number",
        "object",
        "string",
    ],
    "XKubernetesPatchStrategy": [
        "merge",
        "merge,retainKeys",
        "retainKeys",
    ],
    "Group": [
        "admission.k8s.io",
        "admissionregistration.k8s.io",
        "apiextensions.k8s.io",
        "apiregistration.k8s.io",
        "apps",
        "auditregistration.k8s.io",
        "authentication.k8s.io",
        "authorization.k8s.io",
        "autoscaling",
        "batch",
        "certificates.k8s.io",
        "coordination.k8s.io",
        "crd.projectcalico.org",
        "",
        "events.k8s.io",
        "extensions",
        "imagepolicy.k8s.io",
        "networking.k8s.io",
        "node.k8s.io",
        "policy",
        "rbac.authorization.k8s.io",
        "scheduling.k8s.io",
        "settings.k8s.io",
        "storage.k8s.io",
    ],
    "Version": [
        "v1",
        "v1alpha1",
        "v1beta1",
        "v1beta2",
        "v2alpha1",
        "v2beta1",
        "v2beta2",
    ],
    "Consume": [
        "application/json",
        "application/json-patch+json",
        "application/merge-patch+json",
        "application/strategic-merge-patch+json",
        "application/vnd.kubernetes.protobuf",
        "application/yaml",
        "*/*",
    ],
    "In": [
        "body",
        "header",
        "path",
        "query",
    ],
    "Name": [
        "allowWatchBookmarks",
        "authorization",
        "body",
        "command",
        "container",
        "continue",
        "dryRun",
        "exact",
        "export",
        "fieldManager",
        "fieldSelector",
        "follow",
        "force",
        "gracePeriodSeconds",
        "labelSelector",
        "limit",
        "limitBytes",
        "logpath",
        "name",
        "namespace",
        "orphanDependents",
        "path",
        "ports",
        "pretty",
        "previous",
        "propagationPolicy",
        "resourceVersion",
        "sinceSeconds",
        "stderr",
        "stdin",
        "stdout",
        "tty",
        "tailLines",
        "timeoutSeconds",
        "timestamps",
        "watch",
    ],
    "Description": [
        "Accepted",
        "Created",
        "OK",
        "Unauthorized",
    ],
    "Scheme": [
        "https",
    ],
    "DeleteXKubernetesAction": [
        "connect",
        "delete",
        "deletecollection",
        "post",
        "put",
    ],
    "Produce": [
        "application/json",
        "application/json;stream=watch",
        "application/vnd.kubernetes.protobuf",
        "application/vnd.kubernetes.protobuf;stream=watch",
        "application/yaml",
        "*/*",
        "text/plain",
    ],
    "GetXKubernetesAction": [
        "connect",
        "get",
        "list",
        "patch",
        "watch",
        "watchlist",
    ],
    "Tag": [
        "core_v1",
    ],
};

module.exports = {
    "openapiToJson": openapiToJson,
    "toOpenapi": toOpenapi,
};
